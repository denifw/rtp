<?php
/**
 * Contains code written by the PT Makmur Berkat Teknologi.
 * Any other use of this code is in violation of copy rights.
 *
 * @package   Matalogix
 * @author    Yoel Pieter Sumihar <pieter@mbteknologi.com>
 * @copyright ${YEAR} PT Makmur Berkat Teknologi.
 */
namespace App\Model\Listing\\${Name_Space};

use App\Frame\Mvc\AbstractListingModel;
use App\Model\Dao\\${Name_Space}\\${Class_Name}Dao;

/**
 * Class to control the system of ${Class_Name}.
 *
 * @package    app
 * @subpackage Model\Listing\\${Name_Space}
 * @author     Yoel Pieter Sumihar <pieter@mbteknologi.com>
 * @copyright  ${YEAR} PT Makmur Berkat Teknologi.
 */
class ${Class_Name} extends AbstractListingModel
{

    /**
     * ${Class_Name} constructor that will be called when we initiate the class.
     *
     * @param array ${DS}parameters To store the parameter from http.
     */
    public function __construct(array ${DS}parameters)
    {
        # Call parent construct.
        parent::__construct(get_class(${DS}this), '${Page_Route}');
        ${DS}this->setParameters(${DS}parameters);
    }

    /**
     * Abstract function to load search form.
     *
     * @return void
     */
    public function loadSearchForm(): void
    {
        // TODO: Implement loadSearchForm() method.
    }

    /**
     * Abstract function to load the data.
     *
     * @return void
     */
    public function loadResultTable(): void
    {
        # set header column table
        ${DS}this->ListingTable->setHeaderRow([
            // TODO Add the header table here.
        ]);
        # Load the data for ${Class_Name}.
        ${DS}this->ListingTable->addRows(${DS}this->loadData());
        ${DS}this->ListingTable->setViewActionByHyperlink(${DS}this->getViewRoute(), ['${Reference_Code}']);
        if (${DS}this->PageSetting->checkPageRight('AllowUpdate') === true) {
            ${DS}this->ListingTable->setUpdateActionByHyperlink(${DS}this->getUpdateRoute(), ['${Reference_Code}']);
        }
    }

    /**
     * Abstract function to load the total row of the listing data.
     *
     * @return int
     */
    protected function getTotalRows(): int
    {
        return ${Class_Name}Dao::loadTotalData(${DS}this->getWhereCondition());
    }


    /**
     * Get query to get the listing data.
     *
     * @return array
     */
    private function loadData(): array
    {
        return ${Class_Name}Dao::loadData(
                    ${DS}this->getWhereCondition(),
                    ${DS}this->ListingSort->getOrderByFields(),
                    ${DS}this->getLimitTable(),
                    ${DS}this->getLimitOffsetTable());
    }

    /**
     * Function to get the where condition.
     *
     * @return array
     */
    private function getWhereCondition(): array
    {
        # Set where conditions
        ${DS}wheres = [];

        # TODO Check the filter value here.

        # return the list where condition.
        return ${DS}wheres;
    }
}
