<?php
/**
 * Contains code written by the Deni Firdaus Waruwu.
 * Any other use of this code is in violation of copy rights.
 *
 * @package    Project
 * @author     Deni Firdaus Waruwu <deni.firdaus.w@gmail.com>
 * @copyright  ${YEAR} Deni Firdaus Waruwu.
 */
namespace App\Model\Dao\\${Name_Space};

use App\Frame\Mvc\AbstractBaseDao;
use App\Frame\Formatter\DataParser;
use Illuminate\Support\Facades\DB;
use App\Frame\Formatter\SqlHelper;

/**
 * Class to handle data access object for table ${Table_Name}.
 *
 * @package    app
 * @subpackage Model\Dao\\${Name_Space}
 * @author     Deni Firdaus Waruwu <deni.firdaus.w@gmail.com>
 * @copyright  ${YEAR} Deni Firdaus Waruwu.
 */
class ${Class_Name} extends AbstractBaseDao
{
    /**
     * The field for the table.
     *
     * @var array
     */
    private static ${DS}Fields = [
        '${Table_Prefix}_id',
    ];

    /**
     * Property to store the numeric fields.
     *
     * @var array
     */
    protected ${DS}NumericFields = [
        # TODO add list numeric fields here.
    ];

    /**
     * Base dao constructor for ${Table_Name}.
     *
     */
    public function __construct()
    {
        parent::__construct('${Table_Name}', '${Table_Prefix}', self::${DS}Fields);
    }

    /**
     * Function to get data by reference value
     *
     * @param string ${DS}referenceValue To store the reference value of the table.
     *
     * @return array
     */
    public static function getByReference(string ${DS}referenceValue): array
    {
        ${DS}helper = new SqlHelper();
        ${DS}helper->addStringWhere('${Table_Prefix}_id', ${DS}referenceValue);

        ${DS}data = self::loadData(${DS}helper);
        if(count(${DS}data) === 1) {
            return ${DS}data[0];
        }
        return [];
    }

     /**
      * Function to get data by reference value
      *
      * @param string ${DS}referenceValue To store the reference value of the table.
      * @param string ${DS}ssId To store the system setting value.
      *
      * @return array
      */
     public static function getByReferenceAndSystem(string ${DS}referenceValue, string ${DS}ssId): array
     {
         ${DS}helper = new SqlHelper();
         ${DS}helper->addStringWhere('${Table_Prefix}_id', ${DS}referenceValue);
         ${DS}helper->addStringWhere('${Table_Prefix}_ss_id', ${DS}ssId);

         ${DS}data = self::loadData(${DS}helper);
         if(count(${DS}data) === 1) {
            return ${DS}data[0];
         }
         return [];
     }

    /**
     * Function to get all record.
     *
     * @param SqlHelper ${DS}helper To store the list condition query.
     *
     * @return array
     */
    public static function loadData(SqlHelper ${DS}helper): array
    {
        if (${DS}helper->hasOrderBy() === false) {
            ${DS}helper->addOrderBy('');
        }

        ${DS}query = 'SELECT ${Table_Prefix}_id
                        FROM ${Table_Name}' . ${DS}helper;
        ${DS}sqlResults = DB::select(${DS}query);

        return DataParser::arrayObjectToArray(${DS}sqlResults);
    }


    /**
     * Function to get total record.
     *
     * @param SqlHelper ${DS}helper To store the list condition query.
     *
     * @return int
     */
    public static function loadTotalData(SqlHelper ${DS}helper): int
    {
        ${DS}result = 0;
        ${DS}query = 'SELECT count(DISTINCT (${Table_Prefix}_id)) AS total_rows
                        FROM ${Table_Name}' . ${DS}helper->getConditionForCountData();

        ${DS}sqlResults = DB::select(${DS}query);
        if(count(${DS}sqlResults) === 1) {
            ${DS}result = (int)DataParser::objectToArray(${DS}sqlResults[0])['total_rows'];
        }
        return ${DS}result;
    }

    /**
     * Function to get record for single select field.
     *
     * @param array|String ${DS}textColumn To store the text value of single select.
     * @param SqlHelper ${DS}helper To store the list condition query.
     * @param array ${DS}numericFields To store the list sorting query.
     *
     * @return array
     */
    public static function loadSingleSelectData(${DS}textColumn, SqlHelper ${DS}helper, array ${DS}numericFields = []): array
    {
        ${DS}helper->setLimit(20);
        ${DS}data = self::loadData(${DS}helper);

        return parent::doPrepareSingleSelectData(${DS}data, ${DS}textColumn, '${Table_Prefix}_id', ${DS}numericFields);
    }


}
