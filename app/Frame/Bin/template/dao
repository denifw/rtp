<?php
/**
 * Contains code written by the Deni Firdaus Waruwu.
 * Any other use of this code is in violation of copy rights.
 *
 * @package    Project
 * @author     Deni Firdaus Waruwu <deni.firdaus.w@gmail.com>
 * @copyright  ${YEAR} Deni Firdaus Waruwu.
 */
namespace App\Model\Dao\\${Name_Space};

use App\Frame\Mvc\AbstractBaseDao;
use App\Frame\Formatter\DataParser;
use Illuminate\Support\Facades\DB;
use App\Frame\Formatter\SqlHelper;

/**
 * Class to handle data access object for table ${Table_Name}.
 *
 * @package    app
 * @subpackage Model\Dao\\${Name_Space}
 * @author     Deni Firdaus Waruwu <deni.firdaus.w@gmail.com>
 * @copyright  ${YEAR} Deni Firdaus Waruwu.
 */
class ${Class_Name} extends AbstractBaseDao
{
    /**
     * The field for the table.
     *
     * @var array
     */
    private static ${DS}Fields = [
        '${Table_Prefix}_id',
    ];

    /**
     * Base dao constructor for ${Table_Name}.
     *
     */
    public function __construct()
    {
        parent::__construct('${Table_Name}', '${Table_Prefix}', self::${DS}Fields);
    }

    /**
     * Function to get data by reference value
     *
     * @param string ${DS}referenceValue To store the reference value of the table.
     *
     * @return array
     */
    public static function getByReference(string ${DS}referenceValue): array
    {
        ${DS}wheres = [];
        ${DS}wheres[] = SqlHelper::generateStringCondition('${Table_Prefix}_id', ${DS}referenceValue);
        ${DS}data = self::loadData(${DS}wheres);
        if(count(${DS}data) === 1) {
            return ${DS}data[0];
        }
        return [];
    }

     /**
      * Function to get data by reference value
      *
      * @param string ${DS}referenceValue To store the reference value of the table.
      * @param string ${DS}ssId To store the system setting value.
      *
      * @return array
      */
     public static function getByReferenceAndSystem(string ${DS}referenceValue, string ${DS}ssId): array
     {
        ${DS}wheres = [];
        ${DS}wheres[] = SqlHelper::generateStringCondition('${Table_Prefix}_id', ${DS}referenceValue);
        ${DS}wheres[] = SqlHelper::generateStringCondition('${Table_Prefix}_ss_id', ${DS}ssId);
        ${DS}data = self::loadData(${DS}wheres);
        if(count(${DS}data) === 1) {
            return ${DS}data[0];
        }
        return [];
     }

    /**
     * Function to get all record.
     *
     * @param array ${DS}wheres To store the list condition query.
     * @param array ${DS}orders To store the list sorting query.
     * @param int   ${DS}limit  To store the limit of the data.
     * @param int   ${DS}offset To store the offset of the data to apply limit.
     *
     * @return array
     */
    public static function loadData(array ${DS}wheres = [], array ${DS}orders = [], int ${DS}limit = 0, int ${DS}offset = 0): array
    {
        ${DS}strWhere = '';
        if (empty(${DS}wheres) === false) {
            ${DS}strWhere = ' WHERE ' . implode(' AND ', ${DS}wheres);
        }
        ${DS}query = 'SELECT ${Table_Prefix}_id
                        FROM ${Table_Name}' . ${DS}strWhere;
        if (empty(${DS}orders) === false) {
            ${DS}query .= ' ORDER BY '. implode(', ', ${DS}orders);
        }
        if (${DS}limit > 0) {
            ${DS}query .= ' LIMIT ' . ${DS}limit . ' OFFSET ' . ${DS}offset;
        }
        ${DS}sqlResults = DB::select(${DS}query);

        return DataParser::arrayObjectToArray(${DS}sqlResults);
    }


    /**
     * Function to get total record.
     *
     * @param array ${DS}wheres To store the list condition query.
     *
     * @return int
     */
    public static function loadTotalData(array ${DS}wheres = []): int
    {
        ${DS}result = 0;
        ${DS}strWhere = '';
        if (empty(${DS}wheres) === false) {
            ${DS}strWhere = ' WHERE ' . implode(' AND ', ${DS}wheres);
        }
        ${DS}query = 'SELECT count(DISTINCT (${Table_Prefix}_id)) AS total_rows
                        FROM ${Table_Name}' . ${DS}strWhere;

        ${DS}sqlResults = DB::select(${DS}query);
        if(count(${DS}sqlResults) === 1) {
            ${DS}result = (int)DataParser::objectToArray(${DS}sqlResults[0])['total_rows'];
        }
        return ${DS}result;
    }

    /**
     * Function to get record for single select field.
     *
     * @param array|String ${DS}textColumn To store the text value of single select.
     * @param array ${DS}wheres To store the list condition query.
     * @param array ${DS}orders To store the list sorting query.
     *
     * @return array
     */
    public static function loadSingleSelectData(${DS}textColumn, array ${DS}wheres = [], array ${DS}orders = []): array
    {
        ${DS}data = self::loadData(${DS}wheres, ${DS}orders, 20);

        return parent::doPrepareSingleSelectData(${DS}data, ${DS}textColumn, '${Table_Prefix}_id');
    }


}
