<?php
/**
 * Contains code written by the Deni Firdaus Waruwu.
 * Any other use of this code is in violation of copy rights.
 *
 * @package   Project
 * @author    Deni Firdaus Waruwu <deni.firdaus.w@gmail.com>
 * @copyright ${YEAR} Deni Firdaus Waruwu.
 */
namespace App\Model\Ajax\\${Name_Space};

use App\Frame\Formatter\SqlHelper;
use App\Frame\Mvc\AbstractBaseAjaxModel;
use App\Model\Dao\\${Name_Space}\\${Class_Name}Dao;

/**
 * Class to handle the ajax request fo ${Class_Name}.
 *
 * @package    app
 * @subpackage Model\Ajax\\${Name_Space}
 * @author     Deni Firdaus Waruwu <deni.firdaus.w@gmail.com>
 * @copyright  ${YEAR} Deni Firdaus Waruwu.
 */
class ${Class_Name} extends AbstractBaseAjaxModel
{

    /**
     * Function to load the data for single select for ${Class_Name}
     *
     * @return array
     */
    public function loadSingleSelectData(): array
    {
        ${DS}wheres = [];
        if (${DS}this->isValidParameter('search_key') === true) {
            ${DS}wheres[] = SqlHelper::generateLikeCondition('', ${DS}this->getStringParameter('search_key'));
        }
        # TODO Add additional wheres here.

        return ${Class_Name}Dao::loadSingleSelectData('', ${DS}wheres);
    }

    /**
     * Function to load the data by id
     *
     * @return array
     */
    public function getById(): array
    {
        if (${DS}this->isValidParameter('${Reference_Code}') === true) {
            return ${Class_Name}Dao::getByReference(${DS}this->getStringParameter('${Reference_Code}'));
        }
        return [];
    }

    /**
     * Function to load the data by id for copy action
     *
     * @return array
     */
    public function getByIdForCopy(): array
    {
        ${DS}data = [];
        if (${DS}this->isValidParameter('${Reference_Code}') === true) {
            ${DS}data = ${Class_Name}Dao::getByReference(${DS}this->getStringParameter('${Reference_Code}'));
            if (empty(${DS}data) === false) {
                ${DS}data['${Reference_Code}'] = '';
            }
        }

        return ${DS}data;
    }

    /**
     * Function to load the data by id for delete action
     *
     * @return array
     */
    public function getByIdForDelete(): array
    {
        ${DS}result = [];
        if (${DS}this->isValidParameter('${Reference_Code}') === true) {
            ${DS}data = ${Class_Name}Dao::getByReference(${DS}this->getStringParameter('${Reference_Code}'));
            if (empty(${DS}data) === false) {
                ${DS}keys = array_keys(${DS}data);
                foreach (${DS}keys as ${DS}key) {
                    ${DS}result[${DS}key . '_del'] = ${DS}data[${DS}key];
                }
            }
        }

        return ${DS}result;
    }
}
